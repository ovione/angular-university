pending()
fail()
ng test // with hot reload
ng test --no-watch // without hot reload

expect(result).toBe(2, 'error message');

Services
============================

// LogService
{
  log(): string {
    return 'logged';
  }
}

}
// Service
{
  constructor(private log Log) {}

  method() {
    this.log.log();
  }
}

//////////////////////// 1
//  Spy a service
const log = new LogService();
spyOn(log, 'log');

const service = new Service(log);
service.method();

expect(log.method).toHaveBeenCalled();

//////////////////////// 2
const logSpy: any = jasmine.createSpyObj('LogService', ['log']);
logSpy.log.and.returnValue('hello');

const service = new Service(logSpy);
service.method();

expect(logSpy.method).toHaveBeenCalled();

//////////////////////// 3
// HttpClientTestingModule inject HttpClient mock so that backend calls are not made.
// httpTestingController has assertions.
// httpTestingController returns test data

let service: Service;

TestBed.configureTestingModule({
    imports: [ HttpClientTestingModule ],
    providers: [Service,
                {provide: LogService, useValue: logSpy}
               ]
});

this.httpClient = TestBed.inject(HttpClient);
this.httpTestingController = TestBed.inject(HttpTestingController);
this.service = TestBed.inject(serviceType);

//////////////////////// 4

Angular HTTP Service Testing - Step-by-Step Implementation
-------------------------------------------------------------------
VIP httpTestingController api
How to write test data for http
How to return test data via the httpTestingController
Object.values(COURSES): Array<any>

skeleton of http test VIP
------------------------------

service.method().subscribe(obj) {
  verify data returned
  expect(ObjectReturned).toEqual(obj);
}

verify url                                            req = httpTestingController.expectOne(url);
verify method type                                    expect(req.request.method).toEqual('GET');
flush with data returned, the subscribe gets fired    req.flush(ObjectReturned);
verify no other http reqs being made                  httpTestingController.verify()

Example with Utility classes made by Ovione

COURSES:any = {
  12: {
    id: 12,
    titles: {
      name: '',
      descr: '',
    },
    editor: ''
  },
  13: {
    id: 13,
    titles: {
      name: '',
      descr: '',
    },
    editor: ''
  }
}

ServiceSpecUtil
        serviceTest.getService().getSnapshots(reportId, country).subscribe({ // called when flush is called
            next: (returnedObj: Snapshot[]) =>{ serviceTest.verifyHttpCallSuccess(returnedObj, expectedObjectReturnedFlushed); }
        });

        verifyHttpExpectations(serviceTest, `private/report/${reportId}/snapshots?country=${country}`, 'GET', expectedObjectReturnedFlushed);

    export function verifyHttpExpectations(serviceTest: ServiceSpecUtil<any>,
                                           expectedUrl: string,
                                           expectedMethod: string,
                                           expectedObjectReturnedFlushed: any,
                                           opts?: {
                                               status?: number;
                                               statusText?: string;
                                           }) {
        serviceTest.verifyUrl(expectedUrl, 'should expect right url call');
        serviceTest.verifyMethod(expectedMethod, `should be a ${expectedMethod} call`);
        serviceTest.flush(expectedObjectReturnedFlushed, opts);
    }

    // verify the correct url called
    verifyUrl(expectedUrl: string, description?: string) {
        this.req = this.httpTestingController.expectOne(expectedUrl, description);
    }

    // verify the correct method type called: POST, PUT and so on
    verifyMethod(method: string, description?: string) {
        expect(this.req.request.method).toEqual(method, description);
    }

    //  return object when http request made
    flush(expectedObjectReturnedFlushed: any,
          opts?: {
            status?: number;
            statusText?: string;
    }) {
        this.req.flush(expectedObjectReturnedFlushed, opts);
    }

    verifyNoOutstandingRequests() {
        this.httpTestingController.verify();
    }

VIP: When flush on the req is called then the subscribe will be triggered.


Testing Angular HTTP Data Modification Services

req to inspect the body parts with expect(req.request.body.anypropery).toEqual(somevalue);
merge two objects object and create a new object
newObject = {
    ...obj, ...objWithSomePropertiesOfObjModified
}

Angular HTTP Services - Testing Error Handling
-----------------------------------------------------------
service.subscribe() {
 () => fail(),
 (error) => {
  expect errorStatus
 }
}
req.flush('why req failed', {status: 500, statusText: 'bla bla'})

Angular HTTP Testing - Checking HTTP Request Parameters
-----------------------------------------------------------
req = this.httpTestingController.expectOne(req => req.url === 'helloWorld');
expect(req.request.params.get('courseId')).toEqual(12);
expect(req.request.params.get('name')).toEqual('ovione');
or
req = this.httpTestingController.expectOne('helloWorld?courseId=12&name=ovione')

Components
============================
fixture: ComponentFixture<T>: Is an utility type to obtain an instance of the component, debug, detectChanges that triggers change detection and so on.
el:DebugElement: to query the dom = fixture.debuElement();

this.fixture = TestBed.createComponent(componentType);
this.component = this.fixture.componentInstance;
this.el: debugElement = this.fixture.debugElement();

this.component set values
this.fixture.detectChanges() // trigger double binding or change detection
consts cards = el.queryAll(By.); // query the component dom

VIP: async and then

    beforeEach(async(() => {
        TestBed.overrideComponent(
            ObligationActionsComponent,
            {
                set: {
                    providers: [
                        { provide: ObligationActionsHelperService, useValue: obligationActionsHelperServiceSpy }
                    ]
                }
            }
        );

        TestBed.configureTestingModule({
            declarations: [ ObligationActionsComponent ],
            providers: [
                { provide: TemplateComunicatorService, useValue: templateComunicatorServiceSpy },
                { provide: TemplateStorageService, useValue: templateStorageService },
                { provide: TemplateDisableService, useValue: templateDisableServiceSpy },
                { provide: UxAppShellService, useValue: uxAppShellServiceSpy },
                { provide: ObligationActionsService, useValue: obligationActionsServiceSpy },
            ],
            schemas: [NO_ERRORS_SCHEMA,CUSTOM_ELEMENTS_SCHEMA]
        })
        .compileComponents().
        then(() => {
          this.fixture = TestBed.createComponent(componentType);
          this.component = this.fixture.componentInstance;
          this.el: debugElement = this.fixture.debugElement();
          if(detectChanges) {
              this.fixture.detectChanges();
          }
        });
    })));

the then() is better that this
    beforeEach(() => {
        TestBed.configureTestingModule({;
    });

    beforeEach(() => {
        fixture = TestBed.createComponent(ObligationActionsComponent);
        component = fixture.componentInstance;
    });

    it('should create', () => {
        expect(component).toBeTruthy();
    });

Angular Component Testing - DOM Interaction
-------------------------------------------------------
set component values and then
fixture.detectChanges
to trigger double binding


Angular Test Debugging - How to Trigger Change Detection?
----------------------------------------------------------------
sync
This is synchronous VIP Presentation components for components that gets their data from Inputs: @Input, setters and so on.
Its also sync when subscribing but when the subscriber is mocked as a jasmine Spy it will return inmediately.
For example
   serviceSpy.method.and.returnValue(of(returnedValue)) // this will return immediately

fixture.detectChanges() after updating the component
How to print the dom of the component. VIP VIP VIP

el.nativeElement: Gives the native Dom of the component

console.log(el.nativeElement.outerHtml) prints the dom of the component

Testing Angular Smart or Container Components - Test Setup
----------------------------------------------------------------
async: subscriptions and async pipes
smart component: gets data from service subscriptions async and uses worker components
NoopAnimationModule

*ngIf="result | async"

Introduction to Asynchronous Angular Testing - Understanding Jasmine done()
------------------------------------------------------------------------------------
async operations
----------------------
setTimeOut, setInterval to call callbacks
Some material components
http calls

When the component as a async operations then to test we have to use the following techniques:

1.setTimeout // not correct becauseb it test finished before assertions
 it('', () => {
  component does async call
  setTimeout(() => {
    asertions
  }, 10);

2. done callback // This type of test is very risky because its difficult to know how long the timeout should be.
  done callback is called to notify the end of the it test

  it('', (done: DoneFn) => {
      component does async call
      setTimeout(() => {
        asertions
        done();
      }, timeout);
  });
}

3.

Understanding Asynchronous Testing - a Simple Example VIP VIP
Understanding the Angular fakeAsync Testing Zone VIP VIP
----------------------------------------------------------------
