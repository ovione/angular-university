What does it mean to build an application in a reactive style ?

=================================================================================
Imperative Style
  code focuses on writing an explicit sequence of commands to describe how you want the computer to do things

  const double = (numbers: number[]) => {
    cont doubled: number[] = [];

    for(let i=0, i<numbers.length, i++) {
      doubled.push(numbers[i]*2);
    }

    return doubled;
  }

  console.log(double([1, 2, 3));
  result: [2, 4, 6]

Declarative Style
  code focuses on specifying the result of what you want.

  const double = (numbers: number[]) => numbers.map(n => n*2);

  console.log(double([1, 2, 3));
  result: [2, 4, 6]
=================================================================================

1.traditional Imperative Style
  https://callbackhell.com/
  sub1(()=> {
    if(bolean) {
        sub2(()=> {
           do something;
        })
    } else {
        sub3(()=> {
           do something;
        })
    }
  })

2.Reactive style
  Folow the design patterns and avoid CallBack hell.

  The Reactive style component does not know where the data is coming from.
  It uses a reactive service to retrieve the data.
  The data is not a mutable variable but an Observable.
  The data is pushed to the view by the Observable and is consumed by the html with the async pipe.
  If we want to modify the data we can use the multiple rxJs operators inside a pipe.
  Code is flat without deep level of nesting.

  The Imperative Style component knew from where the data was comming from via the http.
  The data was stored in a mutable variable.

html
  <div *ngFor="let data of (data$ | async)" >
  </div>

Component {
  data$: Observable<Data[]>;

  constructor(private service: Service) {}

  ngOnInt() {
    data$ = service.method()
  }
}

Service {
  constructor(private http: Http) {}

  method(): Observable<Data[]> {
    http.get<Data[]>('uri').
    pipe(
      map(this.someMappingFunc())
    );
  }

  private someMappingFunc(res): Data[] {
    return res['payload'];
  }
}

JSON returned by http:
{
  payload: [
    Data1, Data2, ... DataN
  ]
}

Design Pattern 1
------------------------------
Create a stateless service to help the component.
A Reactive Service is a service that has methods that return Observables().

Design Pattern 2
------------------------------
Components passes data to the view as Observables.
All data from the components are Observables and not mutable variables.

Design Pattern 3
------------------------------
Use the async pipe.
The async pipe will subscribe to the Observable.
When the component is destroyed the async pipe will unsubscribe the subscription to prevent memory leaks.

Design Pattern 4
------------------------------
Avoiding Angular duplicate HTTP requests with the RxJs shareReplay operator

  service.method.subscribe
  .pipe(
    map(),
    shareReplay()
  )
  .(() => {})

Design Pattern 5
------------------------------
Smart Components vs Presentational Components

Smart Components: Apply logic to prepare the data and uses the Presentational Components.
Presentational Components:  Only displays without any other logic.

Design Pattern 6 VIP
------------------------------
Data Modification Example in Reactive Style (Stateless Application)
Component dialog where the form is displayed closes itself after save and emits an event.
The smart Component after save event received will reload itself nand its backend Observables.

SmartComponent
  get data via Http
  when it receives an event from the Dispaly Component it reloads from backend and new Observables get subscribed again in html.
  Should show a loader while saving.
Dispaly Component
  shows list and
  open dialog component
  when it receives an event from the Dialog Component only if it contains data saved rxJs filter() it will emit an event
  so that the Smart Component reloads
Dialog component
  save and closes itself and emits value returned from save
  close and emits without value

Component() {
  @Input() course: Coourse;
  form: ;

  constructor(private service: Service) {}

  ngOnInit() {
    this.form = buildForm;
  }

  save() {
    service.save(this.course.id, this.form.value).subscribe({
      next: (returned: any) =>
    });
  }
}

Service {
  constructor(private http: Http) {}

  save(id: string, data: Partial(Data)): Observable<any> {
    return http.put(`/api/courses/${id}`, data);
  }
}

Design Pattern 7
------------------------------
Via a Service like for the logging indicator and error messages

Reactive Component Interaction - Section Introduction
Understanding the Angular Component providers property
------------------------------------------------------------------------------------------------------
@Input() if one component is present in the template of another template.
Loading Component

Structure of home app in: Reactive Component Interaction - Section Introduction: min 2:22

Loading Service Reactive API Design

LoadingService {
  private loadingSubject: BeaviorSubject<boolean>(false); // remembers last value. Any new Subs will receive the last value.
  loading$: Observable<boolean> = this.loadingSubject.asObservable();

  showLoaderUntilCompleted<T>(obs: Observable<T>): Observable<T> {
    return of(null).pipe(
      tap(() => this.logginOn())
      conactMap(() => obs)
      finalize(() => this.logginOff())
    );
  }

  logginOn() {
    this.loadingSubject.next(true);
  }

  logginOff() {
    this.loadingSubject.next(false);
  }
}

Component that shows the loader
  *ngIf="loadingService.loading$ | async"

Component that turns component on|off

  load() {
    this.logginService.logginOn();
    sub.method()
    .pipe(
      finalize(() => this.logginService.logginOff()) // VIP finalize called when call is successful or errors out
    )
    .subscribe(() => )
  }

  or less invasive VIP

    load() {
      sub = sub.method();
      const loadCourses = this.logginService.showLoaderUntilCompleted(sub);

      loadCourses.subscribe(() => )
    }

Messages Service - Implementation Finished and Demo
----------------------------------------------------------

messages-service.ts
service {

private subject = new BehaviorSubject<string[]>([]);
errors$: Obesrevable<string[]> = subject.asObservable().pipe(
filer((messsages: string[]) => messages && messages.length > 0)
);

showErrors(...errors[]) {
subject.next(errors);
}
}

messages-component.ts

<ng-container *ngIf="errors$ | async as errors"> VIP
<div *ngIf="showMessages">
<div *ngFor="let error of errors" >
 {{error}}
</div>
</div>
</ng-container>

MessagesComponent {
errors$: Observable<string[];
showMessages = false;

constructor(messagesService: MessagesService) {}

ngOnInit() {
errors$ = this.messagesService.pipe(
tap(() => this.showMessages = true)
);
}

onClose() {
this.showMessages = true;
}
}


Usage:

constructor(messagesService: MessagesService) {}

aService.method().pipe(
catchError(errors=> {
this.messagesService.showErrors(errors);

return throwError(errors);
})
);

Example how to throw error from json server.
res.status(500).json({message: 'error ocurred'});

Step-by-Step Implementation of an Angular Store Service VIP VIP VIP
-------------------------------------------------------------
Store with a subject = BehaviorSubject.
subject.gatValue() gives the last emited value of the BehaviorSubject.

Master-Detail UI Pattern - Section Introduction
-------------------------------------------------------------

Angular Master Detail Implementation - The Master Table
-------------------------------------------------------------
A table list that when we click on a row we open the row details.

<ng-container *ngIf="!selectedRow; else detail">
  list with rows
</ng-container>

<ng-template #detail>
  detail
</bg-template>

http way to add params

http.get<T>(url, { params : {
params1: someparamValue
}})









































